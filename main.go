package main

// avoid recursion //go:generate slicemeta -type string -outputDir ./internal

import (
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path"
	"strings"
	"time"

	"github.com/azavorotnii/slicemeta/internal/flagutil"
	"github.com/azavorotnii/slicemeta/internal/stringutil"
	"github.com/azavorotnii/slicemeta/internal/templates"
)

const version = "0.0.2a"

func main() {
	var (
		typeName    string
		imports     flagutil.StringList
		equalityOp  string
		packageName string
		outputDir   string
	)

	flag.StringVar(&typeName, "type", "", "type name of slice element asa it is used in other packages (with package name prefix).")
	flag.Var(&imports, "import", "imports to be includes in generated package.")
	flag.StringVar(&equalityOp, "equalityOp", "",
		"can be 'operator' (default), 'equal' or 'deepequal' or custom format string with 2 '%v' arguments.")
	flag.StringVar(&packageName, "package", "", "")
	flag.StringVar(&outputDir, "outputDir", "", "")
	flag.Parse()

	if typeName == "" {
		flag.Usage()
		log.Fatal("type is mandatory argument")
	}
	if packageName == "" {
		name := typeName
		for strings.Contains(name, ".") {
			name = name[strings.Index(name, ".")+1:]
		}
		packageName = strings.ToLower(name) + "util"
	}

	if !stringutil.Contains([]string{"equal", "deepequal", "operator"}, equalityOp) {
		log.Fatalf("unknown equality option: %v", equalityOp)
	}

	if outputDir == "" {
		cwd, err := os.Getwd()
		if err != nil {
			log.Fatal(err)
		}
		outputDir = cwd
	}
	outputDir = path.Join(outputDir, packageName)
	if err := os.MkdirAll(outputDir, 0777); err != nil {
		log.Fatal(err)
	}

	config := templates.Config{
		PackageName: packageName,
		Imports:     imports,
		Comment:     fmt.Sprintf("Generated by %v-%v (%v)", path.Base(os.Args[0]), version, time.Now().Format(time.RFC3339)),
		TypeName:    typeName,
	}

	switch equalityOp {
	case "deepequal":
		templates.UseDeepEqual(&config)
	case "equal":
		templates.UseEqualMethod(&config)
	case "", "operator":
		templates.UseEqualOperator(&config)
	default:
		templates.UseEqualFormat(&config, equalityOp)
	}

	for filename, templateText := range templates.PkgTemplates {
		goCode, err := templates.FormatPackageCode(templateText, config)
		if err != nil {
			log.Printf("%v: %+v\n", filename, err)
			continue
		}
		if err := ioutil.WriteFile(path.Join(outputDir, filename), goCode, 0755); err != nil {
			log.Printf("%v: %v\n", filename, err)
		}
	}
}
